<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:jee="http://www.springframework.org/schema/jee"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">

    <bean id="accountsDataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource">
        <property name="driverClassName" value="com.microsoft.jdbc.sqlserver.SQLServerDriver"/>
        <property name="url" value="jdbc:microsoft:sqlserver://devdb.hq.ussa.org:1433;DatabaseName=accounts"/>
        <property name="username" value="stgsa"/>
        <property name="password" value="goforgold"/>
        <property name="suppressClose" value="true"/>
    </bean>
    <!--<jee:jndi-lookup id="accountDataSource" jndi-name="java:comp/env/jdbc/ACCTDS"/>-->

    <!-- Hibernate SessionFactory -->
    <bean id="accountsSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="accountsDataSource"/>
        <property name="configLocation" value="classpath:/hibernate.cfg.accounts.xml"/>
<!--
        <property name="annotatedPackages">
            <list>
                <value>org.ussa.model</value>
            </list>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>org.ussa.common.model.User</value>
                <value>org.ussa.common.model.Role</value>
            </list>
        </property>
-->
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
    </bean>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
<!--
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="accountsSessionFactory"/>
	</bean>
-->

	<!-- UniversalDao - can be used when doing standard CRUD - made available
			for those who don't mind casting.  If you don't want to cast, look at
			'fooDao' below. -->

<!--
	<bean id="universalDao" class="org.ussa.common.dao.hibernate.UniversalDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
-->

	<bean id="userDao" class="org.ussa.common.dao.hibernate.UserDaoHibernate">
		<property name="sessionFactory" ref="accountsSessionFactory"/>
	</bean>

    <bean id="userManager" class="org.ussa.common.service.impl.UserManagerImpl">
        <property name="userDao" ref="userDao"/>
    </bean>


<!--
	 If you want to be able to do simple CRUD for new domain objects without
			having to cast, you don't have create a Dao interface and implementation
			for that domain object, you simply have to do the following.

			eg... 'fooDao'

		<bean id="fooDao" class="org.ussa.common.dao.hibernate.GenericDaoHibernate">
			<constructor-arg value="org.appfuse.model.Foo"/>
			<property name="sessionFactory" ref="sessionFactory"/>
		</bean>

		You will need to create a Dao interface and implementation for that
			domain object if you need more than simple CRUD to occur.
			(finders, bulk update/delete, etc.)
-->

</beans>
