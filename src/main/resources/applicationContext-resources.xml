<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:jee="http://www.springframework.org/schema/jee"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">

	<!-- For mail settings and future properties files -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mail.properties</value>
			</list>
		</property>
	</bean>

	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/MPSDS"/>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/>
<!--
		<property name="annotatedPackages">
			<list>
				<value>org.ussa.model</value>
			</list>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>org.ussa.common.model.User</value>
				<value>org.ussa.common.model.Role</value>
			</list>
		</property>
-->
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${hibernate.dialect}
				hibernate.query.substitutions=true 'Y', false 'N'
				hibernate.cache.use_second_level_cache=true
				hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
				net.sf.ehcache.configurationResourceName=/ehcache.xml
			</value>
			<!-- Turn batching off for better error messages under PostgreSQL -->
			<!-- hibernate.jdbc.batch_size=0 -->
		</property>
	</bean>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- USSA JavaMailer -->
	<jee:jndi-lookup id="mailServer" jndi-name="java:comp/env/mail/serverName"/>
	<jee:jndi-lookup id="mailServerPort" jndi-name="java:comp/env/mail/serverPort"/>
	<jee:jndi-lookup id="mailUserName" jndi-name="java:comp/env/mail/userName"/>
	<jee:jndi-lookup id="mailPassword" jndi-name="java:comp/env/mail/password"/>
	<jee:jndi-lookup id="defaultFromAddress" jndi-name="java:comp/env/mail/defaultFromAddress"/>
	<jee:jndi-lookup id="defaultReplyToAddress" jndi-name="java:comp/env/mail/defaultReplyToAddress"/>
	<jee:jndi-lookup id="mailProperties" jndi-name="java:comp/env/mail/properties"/>
	<jee:jndi-lookup id="mailEnabled" jndi-name="java:comp/env/mail/enabled"/>
	
	<bean id="ussaJavaMailer" class="org.ussa.util.UssaJavaMailer">
		<constructor-arg ref="mailProperties"/>
		<property name="host" ref="mailServer"/>
		<property name="port" ref="mailServerPort"/>
		<property name="username" ref="mailUserName"/>
		<property name="password" ref="mailPassword"/>
		<property name="defaultFromAddress" ref="defaultFromAddress"/>
		<property name="defaultReplyToAddress" ref="defaultReplyToAddress"/>
		<property name="enabled" ref="mailEnabled"/>
	</bean>

	<!-- UniversalDao - can be used when doing standard CRUD - made available
			for those who don't mind casting.  If you don't want to cast, look at
			'fooDao' below. -->
	<bean id="universalDao" class="org.ussa.common.dao.hibernate.UniversalDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!--
	<bean id="lookupDao" class="org.appfuse.dao.hibernate.LookupDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<bean id="userDao" class="org.appfuse.dao.hibernate.UserDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<bean id="roleDao" class="org.appfuse.dao.hibernate.RoleDaoHibernate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
-->

	<!-- If you want to be able to do simple CRUD for new domain objects without
			having to cast, you don't have create a Dao interface and implementation
			for that domain object, you simply have to do the following.

			eg... 'fooDao'

		<bean id="fooDao" class="org.ussa.common.dao.hibernate.GenericDaoHibernate">
			<constructor-arg value="org.appfuse.model.Foo"/>
			<property name="sessionFactory" ref="sessionFactory"/>
		</bean>

		You will need to create a Dao interface and implementation for that
			domain object if you need more than simple CRUD to occur.
			(finders, bulk update/delete, etc.)
		-->

</beans>
